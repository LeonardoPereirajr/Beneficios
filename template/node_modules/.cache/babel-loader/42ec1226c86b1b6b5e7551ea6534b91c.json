{"ast":null,"code":"import GLOBAL from './storage.json';\nimport findSring from '../Functions/findString';\nexport function saveData(data) {\n  let invalidForm = false;\n\n  const saveStop = () => {\n    // throw new Error('Formulario Invalido')\n    console.log(GLOBAL.tarefa_1);\n  };\n\n  function tarefa_1() {\n    const taskData = GLOBAL.tarefa_1;\n    console.log(taskData);\n    throw new Error();\n    let retorno = {\n      motivoSelecionado: taskData.motivoSelecionado.label,\n      operacaoSelecionada: taskData.operacaoSelecionada.label,\n      beneficioSelecionado: taskData.beneficioSelecionado.label,\n      transporteSelecionado: taskData.transporteSelecionado.label,\n      codlin: taskData.codlin,\n      tipo: taskData.tipo,\n      valor: taskData.valor,\n      qtdida: taskData.qtdida,\n      qtdvolta: taskData.qtdvolta,\n      datainivale: taskData.datainivale,\n      fimperiodo: taskData.fimperiodo,\n      esc: taskData.esc,\n      datafimvale: taskData.datafimvale,\n      linha: taskData.linha,\n      cartao: taskData.cartao,\n      escvtr: taskData.escvtr,\n      inievt: taskData.inievt,\n      nomevt: taskData.nomevt,\n      tarefa1_JSON: JSON.stringify(taskData)\n    };\n    return {\n      formData: { ...retorno\n      }\n    };\n  }\n\n  saveStop();\n\n  function tarefa_2() {\n    const decisaoUsuario = data.nextAction.name;\n    console.log(GLOBAL);\n\n    if (findSring(decisaoUsuario, 'Ajustar') || findSring(decisaoUsuario, 'Reprovar')) {\n      return {\n        formData: {\n          decisao: decisaoUsuario\n        }\n      };\n    } else {\n      return {\n        formData: {\n          decisao: decisaoUsuario\n        }\n      };\n    } // if (!invalidForm) {\n    //     if (findSring(proximaTarefa.name, 'Aprova')) {\n    //         let beneficios = [{\n    //                 motivoSelecionado: GLOBAL.state.variaveisProcesso.empresaSolicitante,\n    //                 operacaoSelecionada: GLOBAL.state.variaveisProcesso.operacaoSelecionada.label,\n    //                 beneficioSelecionado: GLOBAL.state.variaveisProcesso.beneficioSelecionado.label,\n    //                 transporteSelecionado: GLOBAL.state.variaveisProcesso.transporteSelecionado.label,\n    //                 codlin: GLOBAL.state.variaveisProcesso.codlin,\n    //                 tipo: GLOBAL.state.variaveisProcesso.tipo,\n    //                 valor: GLOBAL.state.variaveisProcesso.valor,\n    //                 qtdida: GLOBAL.state.variaveisProcesso.qtdida,\n    //                 qtdvolta: GLOBAL.state.variaveisProcesso.qtdvolta,\n    //                 novoperiodo: GLOBAL.state.variaveisProcesso.novoperiodo,\n    //                 fimperiodo: GLOBAL.state.variaveisProcesso.fimperiodo,\n    //                 esc: GLOBAL.state.variaveisProcesso.esc,\n    //                 datafimvale: GLOBAL.state.variaveisProcesso.datafimvale,\n    //                 linha: GLOBAL.state.variaveisProcesso.linha,\n    //                 cartao: GLOBAL.state.variaveisProcesso.cartao,\n    //                 escvtr: GLOBAL.state.variaveisProcesso.escvtr,\n    //                 inievt: GLOBAL.state.variaveisProcesso.inievt,\n    //                 nomevt: GLOBAL.state.variaveisProcesso.nomevt,\n    //             }];\n    //             let { retorno } = await postValeTransporte(beneficios);\n    //         if (retorno != 'Sucesso') {\n    //             erroIntegracao = 1;\n    //             console.log(\"Retorno != Sucesso\")\n    //             setMessage({ severity: 'error', detail: retorno, sticky: true, life: 10000 });\n    //             integracao = 'Erro na integração'\n    //             throw new Error('Erro na integração.');\n    //         } else if (retorno == 'Sucesso') {\n    //             console.log(\"retorno = Sucesso\")\n    //             integracao = 'Integrado com sucesso'\n    //             erroIntegracao = 0;\n    //             setMessage({ severity: 'success', \n    //             summary: 'Gravado com Sucesso!', detail: 'Beneficio gravado com sucesso!', sticky: true })\n    //         }\n    //     }\n    //     let retorno = {\n    //     codlin: taskData.codlin,\n    //     tipo: taskData.tipo,\n    //     valor: taskData.valor,\n    //     qtdida: taskData.qtdida,\n    //     qtdvolta: taskData.qtdvolta,\n    //     novoperiodo: taskData.datainivale,\n    //     fimperiodo: taskData.fimperiodo,\n    //     esc: taskData.esc,\n    //     datafimvale: taskData.datafimvale,\n    //     linha: taskData.linha,\n    //     cartao: taskData.cartao,\n    //     motivoSelecionado: taskData.motivoSelecionado.label,\n    //     operacaoSelecionada: taskData.operacaoSelecionada.label,\n    //     beneficioSelecionado: taskData.beneficioSelecionado.label,\n    //     transporteSelecionado: taskData.transporteSelecionado.label,\n    //     escvtr: taskData.escvtr,\n    //     inievt: taskData.inievt,\n    //     nomevt: taskData.nomevt\n    //     }\n    //     console.log(\"FormData Retorno\", retorno)\n    //     return {\n    //         formData: { ...retorno }\n    //     }\n    // } else {\n    //     saveStop()\n    // }\n\n  }\n\n  return {\n    tarefa_1,\n    tarefa_2\n  };\n}","map":{"version":3,"names":["GLOBAL","findSring","saveData","data","invalidForm","saveStop","console","log","tarefa_1","taskData","Error","retorno","motivoSelecionado","label","operacaoSelecionada","beneficioSelecionado","transporteSelecionado","codlin","tipo","valor","qtdida","qtdvolta","datainivale","fimperiodo","esc","datafimvale","linha","cartao","escvtr","inievt","nomevt","tarefa1_JSON","JSON","stringify","formData","tarefa_2","decisaoUsuario","nextAction","name","decisao"],"sources":["C:/Users/leojr/Workspace8/Beneficios/template/src/integration/saveDate.js"],"sourcesContent":["import GLOBAL from './storage.json'\r\nimport findSring from '../Functions/findString';\r\n\r\nexport function saveData(data) {\r\n    let invalidForm = false;\r\n\r\n\r\n    const saveStop = () => {\r\n        // throw new Error('Formulario Invalido')\r\n        console.log(GLOBAL.tarefa_1)\r\n    }\r\n\r\n\r\n    function tarefa_1() {\r\n        const taskData = GLOBAL.tarefa_1;\r\n        console.log(taskData)\r\n        throw new Error()\r\n        let retorno = {\r\n            motivoSelecionado: taskData.motivoSelecionado.label,\r\n            operacaoSelecionada: taskData.operacaoSelecionada.label,\r\n            beneficioSelecionado: taskData.beneficioSelecionado.label,\r\n            transporteSelecionado: taskData.transporteSelecionado.label,\r\n            codlin: taskData.codlin,\r\n            tipo: taskData.tipo,\r\n            valor: taskData.valor,\r\n            qtdida: taskData.qtdida,\r\n            qtdvolta: taskData.qtdvolta,\r\n            datainivale: taskData.datainivale,\r\n            fimperiodo: taskData.fimperiodo,\r\n            esc: taskData.esc,\r\n            datafimvale: taskData.datafimvale,\r\n            linha: taskData.linha,\r\n            cartao: taskData.cartao,\r\n            escvtr: taskData.escvtr,\r\n            inievt: taskData.inievt,\r\n            nomevt: taskData.nomevt,\r\n            tarefa1_JSON: JSON.stringify(taskData)\r\n        }\r\n        return {\r\n            formData: { ...retorno }\r\n        }\r\n    }\r\n    saveStop()\r\n\r\n\r\n    function tarefa_2() {\r\n        const decisaoUsuario = data.nextAction.name;\r\n        console.log(GLOBAL)\r\n        if (findSring(decisaoUsuario, 'Ajustar') || findSring(decisaoUsuario, 'Reprovar')) {\r\n            return {\r\n                formData: {\r\n                    decisao: decisaoUsuario\r\n                }\r\n            }\r\n        } else {\r\n            return {\r\n                formData: { decisao: decisaoUsuario }\r\n            }\r\n        }\r\n        // if (!invalidForm) {\r\n        //     if (findSring(proximaTarefa.name, 'Aprova')) {\r\n        //         let beneficios = [{\r\n        //                 motivoSelecionado: GLOBAL.state.variaveisProcesso.empresaSolicitante,\r\n        //                 operacaoSelecionada: GLOBAL.state.variaveisProcesso.operacaoSelecionada.label,\r\n        //                 beneficioSelecionado: GLOBAL.state.variaveisProcesso.beneficioSelecionado.label,\r\n        //                 transporteSelecionado: GLOBAL.state.variaveisProcesso.transporteSelecionado.label,\r\n        //                 codlin: GLOBAL.state.variaveisProcesso.codlin,\r\n        //                 tipo: GLOBAL.state.variaveisProcesso.tipo,\r\n        //                 valor: GLOBAL.state.variaveisProcesso.valor,\r\n        //                 qtdida: GLOBAL.state.variaveisProcesso.qtdida,\r\n        //                 qtdvolta: GLOBAL.state.variaveisProcesso.qtdvolta,\r\n        //                 novoperiodo: GLOBAL.state.variaveisProcesso.novoperiodo,\r\n        //                 fimperiodo: GLOBAL.state.variaveisProcesso.fimperiodo,\r\n        //                 esc: GLOBAL.state.variaveisProcesso.esc,\r\n        //                 datafimvale: GLOBAL.state.variaveisProcesso.datafimvale,\r\n        //                 linha: GLOBAL.state.variaveisProcesso.linha,\r\n        //                 cartao: GLOBAL.state.variaveisProcesso.cartao,\r\n        //                 escvtr: GLOBAL.state.variaveisProcesso.escvtr,\r\n        //                 inievt: GLOBAL.state.variaveisProcesso.inievt,\r\n        //                 nomevt: GLOBAL.state.variaveisProcesso.nomevt,\r\n        //             }];\r\n        //             let { retorno } = await postValeTransporte(beneficios);\r\n        //         if (retorno != 'Sucesso') {\r\n        //             erroIntegracao = 1;\r\n        //             console.log(\"Retorno != Sucesso\")\r\n        //             setMessage({ severity: 'error', detail: retorno, sticky: true, life: 10000 });\r\n        //             integracao = 'Erro na integração'\r\n        //             throw new Error('Erro na integração.');\r\n        //         } else if (retorno == 'Sucesso') {\r\n        //             console.log(\"retorno = Sucesso\")\r\n        //             integracao = 'Integrado com sucesso'\r\n        //             erroIntegracao = 0;\r\n        //             setMessage({ severity: 'success', \r\n        //             summary: 'Gravado com Sucesso!', detail: 'Beneficio gravado com sucesso!', sticky: true })\r\n        //         }\r\n        //     }\r\n        //     let retorno = {\r\n        //     codlin: taskData.codlin,\r\n        //     tipo: taskData.tipo,\r\n        //     valor: taskData.valor,\r\n        //     qtdida: taskData.qtdida,\r\n        //     qtdvolta: taskData.qtdvolta,\r\n        //     novoperiodo: taskData.datainivale,\r\n        //     fimperiodo: taskData.fimperiodo,\r\n        //     esc: taskData.esc,\r\n        //     datafimvale: taskData.datafimvale,\r\n        //     linha: taskData.linha,\r\n        //     cartao: taskData.cartao,\r\n        //     motivoSelecionado: taskData.motivoSelecionado.label,\r\n        //     operacaoSelecionada: taskData.operacaoSelecionada.label,\r\n        //     beneficioSelecionado: taskData.beneficioSelecionado.label,\r\n        //     transporteSelecionado: taskData.transporteSelecionado.label,\r\n        //     escvtr: taskData.escvtr,\r\n        //     inievt: taskData.inievt,\r\n        //     nomevt: taskData.nomevt\r\n        //     }\r\n        //     console.log(\"FormData Retorno\", retorno)\r\n        //     return {\r\n        //         formData: { ...retorno }\r\n        //     }\r\n        // } else {\r\n        //     saveStop()\r\n        // }\r\n    }\r\n    return { tarefa_1, tarefa_2 }\r\n}"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,gBAAnB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AAEA,OAAO,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;EAC3B,IAAIC,WAAW,GAAG,KAAlB;;EAGA,MAAMC,QAAQ,GAAG,MAAM;IACnB;IACAC,OAAO,CAACC,GAAR,CAAYP,MAAM,CAACQ,QAAnB;EACH,CAHD;;EAMA,SAASA,QAAT,GAAoB;IAChB,MAAMC,QAAQ,GAAGT,MAAM,CAACQ,QAAxB;IACAF,OAAO,CAACC,GAAR,CAAYE,QAAZ;IACA,MAAM,IAAIC,KAAJ,EAAN;IACA,IAAIC,OAAO,GAAG;MACVC,iBAAiB,EAAEH,QAAQ,CAACG,iBAAT,CAA2BC,KADpC;MAEVC,mBAAmB,EAAEL,QAAQ,CAACK,mBAAT,CAA6BD,KAFxC;MAGVE,oBAAoB,EAAEN,QAAQ,CAACM,oBAAT,CAA8BF,KAH1C;MAIVG,qBAAqB,EAAEP,QAAQ,CAACO,qBAAT,CAA+BH,KAJ5C;MAKVI,MAAM,EAAER,QAAQ,CAACQ,MALP;MAMVC,IAAI,EAAET,QAAQ,CAACS,IANL;MAOVC,KAAK,EAAEV,QAAQ,CAACU,KAPN;MAQVC,MAAM,EAAEX,QAAQ,CAACW,MARP;MASVC,QAAQ,EAAEZ,QAAQ,CAACY,QATT;MAUVC,WAAW,EAAEb,QAAQ,CAACa,WAVZ;MAWVC,UAAU,EAAEd,QAAQ,CAACc,UAXX;MAYVC,GAAG,EAAEf,QAAQ,CAACe,GAZJ;MAaVC,WAAW,EAAEhB,QAAQ,CAACgB,WAbZ;MAcVC,KAAK,EAAEjB,QAAQ,CAACiB,KAdN;MAeVC,MAAM,EAAElB,QAAQ,CAACkB,MAfP;MAgBVC,MAAM,EAAEnB,QAAQ,CAACmB,MAhBP;MAiBVC,MAAM,EAAEpB,QAAQ,CAACoB,MAjBP;MAkBVC,MAAM,EAAErB,QAAQ,CAACqB,MAlBP;MAmBVC,YAAY,EAAEC,IAAI,CAACC,SAAL,CAAexB,QAAf;IAnBJ,CAAd;IAqBA,OAAO;MACHyB,QAAQ,EAAE,EAAE,GAAGvB;MAAL;IADP,CAAP;EAGH;;EACDN,QAAQ;;EAGR,SAAS8B,QAAT,GAAoB;IAChB,MAAMC,cAAc,GAAGjC,IAAI,CAACkC,UAAL,CAAgBC,IAAvC;IACAhC,OAAO,CAACC,GAAR,CAAYP,MAAZ;;IACA,IAAIC,SAAS,CAACmC,cAAD,EAAiB,SAAjB,CAAT,IAAwCnC,SAAS,CAACmC,cAAD,EAAiB,UAAjB,CAArD,EAAmF;MAC/E,OAAO;QACHF,QAAQ,EAAE;UACNK,OAAO,EAAEH;QADH;MADP,CAAP;IAKH,CAND,MAMO;MACH,OAAO;QACHF,QAAQ,EAAE;UAAEK,OAAO,EAAEH;QAAX;MADP,CAAP;IAGH,CAbe,CAchB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;EACH;;EACD,OAAO;IAAE5B,QAAF;IAAY2B;EAAZ,CAAP;AACH"},"metadata":{},"sourceType":"module"}
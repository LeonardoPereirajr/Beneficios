{"ast":null,"code":"import findSring from \"./findString\";\nexport default function processVariableMapper(processVariables) {\n  if (processVariables.length) {\n    let variaveisMapeadas = {};\n    processVariables.map(_ref => {\n      let {\n        key,\n        value,\n        type\n      } = _ref;\n\n      if (value) {\n        if (findSring(key, '_JSON')) {\n          variaveisMapeadas[key] = JSON.parse(value);\n        } else if (type == 'Integer') {\n          variaveisMapeadas[key] = parseInt(value);\n        } else if (type == 'Double') {\n          variaveisMapeadas[key] = parseFloat(value);\n        } else if (type == 'Date') {\n          variaveisMapeadas[key] = new Date(value);\n        } else if (findSring(key, '_JSON')) {\n          variaveisMapeadas[key] = JSON.parse(value);\n        } else {\n          variaveisMapeadas[key] = value;\n        }\n      } else {\n        variaveisMapeadas[key] = null;\n      }\n    });\n    return variaveisMapeadas;\n  }\n}","map":{"version":3,"names":["findSring","processVariableMapper","processVariables","length","variaveisMapeadas","map","key","value","type","JSON","parse","parseInt","parseFloat","Date"],"sources":["C:/Users/leojr/Workspace8/Beneficios/template/src/Functions/processVariablesMapper.js"],"sourcesContent":["import findSring from \"./findString\";\r\n\r\nexport default function processVariableMapper(processVariables) {\r\n    if (processVariables.length) {\r\n        let variaveisMapeadas = {};\r\n        processVariables.map(({ key, value, type }) => {\r\n            if (value) {\r\n                if (findSring(key, '_JSON')) {\r\n                    variaveisMapeadas[key] = JSON.parse(value);\r\n                } else if (type == 'Integer') {\r\n                    variaveisMapeadas[key] = parseInt(value);\r\n                } else if (type == 'Double') {\r\n                    variaveisMapeadas[key] = parseFloat(value);\r\n                } else if (type == 'Date') {\r\n                    variaveisMapeadas[key] = new Date(value);\r\n                } else if (findSring(key, '_JSON')) {\r\n                    variaveisMapeadas[key] = JSON.parse(value);\r\n                } else {\r\n                    variaveisMapeadas[key] = value;\r\n                }\r\n            } else {\r\n                variaveisMapeadas[key] = null;\r\n            }\r\n        });\r\n        return variaveisMapeadas;\r\n    }\r\n}"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,cAAtB;AAEA,eAAe,SAASC,qBAAT,CAA+BC,gBAA/B,EAAiD;EAC5D,IAAIA,gBAAgB,CAACC,MAArB,EAA6B;IACzB,IAAIC,iBAAiB,GAAG,EAAxB;IACAF,gBAAgB,CAACG,GAAjB,CAAqB,QAA0B;MAAA,IAAzB;QAAEC,GAAF;QAAOC,KAAP;QAAcC;MAAd,CAAyB;;MAC3C,IAAID,KAAJ,EAAW;QACP,IAAIP,SAAS,CAACM,GAAD,EAAM,OAAN,CAAb,EAA6B;UACzBF,iBAAiB,CAACE,GAAD,CAAjB,GAAyBG,IAAI,CAACC,KAAL,CAAWH,KAAX,CAAzB;QACH,CAFD,MAEO,IAAIC,IAAI,IAAI,SAAZ,EAAuB;UAC1BJ,iBAAiB,CAACE,GAAD,CAAjB,GAAyBK,QAAQ,CAACJ,KAAD,CAAjC;QACH,CAFM,MAEA,IAAIC,IAAI,IAAI,QAAZ,EAAsB;UACzBJ,iBAAiB,CAACE,GAAD,CAAjB,GAAyBM,UAAU,CAACL,KAAD,CAAnC;QACH,CAFM,MAEA,IAAIC,IAAI,IAAI,MAAZ,EAAoB;UACvBJ,iBAAiB,CAACE,GAAD,CAAjB,GAAyB,IAAIO,IAAJ,CAASN,KAAT,CAAzB;QACH,CAFM,MAEA,IAAIP,SAAS,CAACM,GAAD,EAAM,OAAN,CAAb,EAA6B;UAChCF,iBAAiB,CAACE,GAAD,CAAjB,GAAyBG,IAAI,CAACC,KAAL,CAAWH,KAAX,CAAzB;QACH,CAFM,MAEA;UACHH,iBAAiB,CAACE,GAAD,CAAjB,GAAyBC,KAAzB;QACH;MACJ,CAdD,MAcO;QACHH,iBAAiB,CAACE,GAAD,CAAjB,GAAyB,IAAzB;MACH;IACJ,CAlBD;IAmBA,OAAOF,iBAAP;EACH;AACJ"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import GLOBAL from './storage.json';\nimport validation from '../Functions/functions.js';\nimport findSring from '../Functions/findString';\nexport function saveData(data) {\n  let invalidForm = false;\n\n  const saveStop = () => {\n    throw new Error('Formulario Invalido');\n  };\n\n  function tarefa_1() {\n    var _taskData$usuario, _taskData$usuario2;\n\n    const taskData = GLOBAL.tarefa_1;\n    console.log(taskData);\n    let retorno = {\n      usuario: ` ${taskData.usuario.numCad} - ${taskData.usuario.nomFun} `,\n      empresa: `${taskData.empresa.numEmp} - ${taskData.empresa.nomFil}`,\n      filial: `${taskData.empresa.numEmp} - ${taskData.empresa.nomFil}`,\n      data: new Date(),\n      escala: taskData.usuario.escala,\n      beneficios_JSON: JSON.stringify(taskData),\n      dados: `Empresa ${taskData.empresa.nomFil} - ${taskData.empresa.numEmp} - ${taskData.empresa.nomFil} - Colaborador ${(_taskData$usuario = taskData.usuario) === null || _taskData$usuario === void 0 ? void 0 : _taskData$usuario.nomFun} - ${(_taskData$usuario2 = taskData.usuario) === null || _taskData$usuario2 === void 0 ? void 0 : _taskData$usuario2.nomFun}`,\n      descricao: taskData.descricao\n    };\n    return {\n      formData: retorno\n    };\n  }\n\n  function tarefa_2() {\n    const decisaoUsuario = data.nextAction.name;\n\n    if (findSring(decisaoUsuario, 'Ajustar') || findSring(decisaoUsuario, 'Reprovar')) {\n      var _GLOBAL$tarefa_;\n\n      if (!((_GLOBAL$tarefa_ = GLOBAL.tarefa_2) !== null && _GLOBAL$tarefa_ !== void 0 && _GLOBAL$tarefa_.observacao)) {\n        alert(\"Campo observação é obrigatório\");\n        saveStop();\n      }\n\n      console.log(GLOBAL.tarefa_2.observacao);\n      return {\n        formData: {\n          observacao: GLOBAL.tarefa_2.observacao,\n          decisao: decisaoUsuario\n        }\n      };\n    } else {\n      return {\n        formData: {\n          decisao: decisaoUsuario\n        }\n      };\n    }\n  }\n\n  return {\n    tarefa_1,\n    tarefa_2\n  };\n}","map":{"version":3,"names":["GLOBAL","validation","findSring","saveData","data","invalidForm","saveStop","Error","tarefa_1","taskData","console","log","retorno","usuario","numCad","nomFun","empresa","numEmp","nomFil","filial","Date","escala","beneficios_JSON","JSON","stringify","dados","descricao","formData","tarefa_2","decisaoUsuario","nextAction","name","observacao","alert","decisao"],"sources":["C:/Users/leojr/Workspace8/Beneficios/template/src/integration/saveDate.js"],"sourcesContent":["import GLOBAL from './storage.json'\r\nimport validation from '../Functions/functions.js'\r\nimport findSring from '../Functions/findString';\r\n\r\nexport function saveData(data) {\r\n    let invalidForm = false;\r\n    \r\n\r\n    const saveStop = () => {\r\n        throw new Error('Formulario Invalido')\r\n    }\r\n\r\n\r\n    function tarefa_1() {\r\n        const taskData = GLOBAL.tarefa_1;\r\n        console.log(taskData)\r\n\r\n        let retorno = {\r\n            usuario: ` ${taskData.usuario.numCad} - ${taskData.usuario.nomFun} `,\r\n            empresa: `${taskData.empresa.numEmp} - ${taskData.empresa.nomFil}`,\r\n            filial: `${taskData.empresa.numEmp} - ${taskData.empresa.nomFil}`,\r\n            data: new Date(),\r\n            escala: taskData.usuario.escala,\r\n            beneficios_JSON: JSON.stringify(taskData),\r\n            dados: `Empresa ${taskData.empresa.nomFil} - ${taskData.empresa.numEmp} - ${taskData.empresa.nomFil} - Colaborador ${taskData.usuario?.nomFun} - ${taskData.usuario?.nomFun}`,\r\n            descricao: taskData.descricao\r\n        }\r\n        return {\r\n            formData: retorno\r\n        }\r\n    }\r\n    function tarefa_2(){\r\n        const decisaoUsuario = data.nextAction.name;\r\n        if(findSring(decisaoUsuario,'Ajustar' )||findSring(decisaoUsuario,'Reprovar')){\r\n            if(!GLOBAL.tarefa_2?.observacao){\r\n                alert(\"Campo observação é obrigatório\")\r\n                saveStop()\r\n            }\r\n            console.log(GLOBAL.tarefa_2.observacao)\r\n            return {\r\n                formData: {\r\n                    observacao: GLOBAL.tarefa_2.observacao,\r\n                    decisao: decisaoUsuario\r\n                }\r\n             \r\n            }\r\n        }else{\r\n            return{\r\n                formData: {decisao: decisaoUsuario}\r\n            }\r\n        }\r\n    }\r\n    return {tarefa_1,tarefa_2}\r\n}"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,gBAAnB;AACA,OAAOC,UAAP,MAAuB,2BAAvB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AAEA,OAAO,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;EAC3B,IAAIC,WAAW,GAAG,KAAlB;;EAGA,MAAMC,QAAQ,GAAG,MAAM;IACnB,MAAM,IAAIC,KAAJ,CAAU,qBAAV,CAAN;EACH,CAFD;;EAKA,SAASC,QAAT,GAAoB;IAAA;;IAChB,MAAMC,QAAQ,GAAGT,MAAM,CAACQ,QAAxB;IACAE,OAAO,CAACC,GAAR,CAAYF,QAAZ;IAEA,IAAIG,OAAO,GAAG;MACVC,OAAO,EAAG,IAAGJ,QAAQ,CAACI,OAAT,CAAiBC,MAAO,MAAKL,QAAQ,CAACI,OAAT,CAAiBE,MAAO,GADxD;MAEVC,OAAO,EAAG,GAAEP,QAAQ,CAACO,OAAT,CAAiBC,MAAO,MAAKR,QAAQ,CAACO,OAAT,CAAiBE,MAAO,EAFvD;MAGVC,MAAM,EAAG,GAAEV,QAAQ,CAACO,OAAT,CAAiBC,MAAO,MAAKR,QAAQ,CAACO,OAAT,CAAiBE,MAAO,EAHtD;MAIVd,IAAI,EAAE,IAAIgB,IAAJ,EAJI;MAKVC,MAAM,EAAEZ,QAAQ,CAACI,OAAT,CAAiBQ,MALf;MAMVC,eAAe,EAAEC,IAAI,CAACC,SAAL,CAAef,QAAf,CANP;MAOVgB,KAAK,EAAG,WAAUhB,QAAQ,CAACO,OAAT,CAAiBE,MAAO,MAAKT,QAAQ,CAACO,OAAT,CAAiBC,MAAO,MAAKR,QAAQ,CAACO,OAAT,CAAiBE,MAAO,kBAA7F,qBAA8GT,QAAQ,CAACI,OAAvH,sDAA8G,kBAAkBE,MAAO,MAAvI,sBAA4IN,QAAQ,CAACI,OAArJ,uDAA4I,mBAAkBE,MAAO,EAPlK;MAQVW,SAAS,EAAEjB,QAAQ,CAACiB;IARV,CAAd;IAUA,OAAO;MACHC,QAAQ,EAAEf;IADP,CAAP;EAGH;;EACD,SAASgB,QAAT,GAAmB;IACf,MAAMC,cAAc,GAAGzB,IAAI,CAAC0B,UAAL,CAAgBC,IAAvC;;IACA,IAAG7B,SAAS,CAAC2B,cAAD,EAAgB,SAAhB,CAAT,IAAsC3B,SAAS,CAAC2B,cAAD,EAAgB,UAAhB,CAAlD,EAA8E;MAAA;;MAC1E,IAAG,qBAAC7B,MAAM,CAAC4B,QAAR,4CAAC,gBAAiBI,UAAlB,CAAH,EAAgC;QAC5BC,KAAK,CAAC,gCAAD,CAAL;QACA3B,QAAQ;MACX;;MACDI,OAAO,CAACC,GAAR,CAAYX,MAAM,CAAC4B,QAAP,CAAgBI,UAA5B;MACA,OAAO;QACHL,QAAQ,EAAE;UACNK,UAAU,EAAEhC,MAAM,CAAC4B,QAAP,CAAgBI,UADtB;UAENE,OAAO,EAAEL;QAFH;MADP,CAAP;IAOH,CAbD,MAaK;MACD,OAAM;QACFF,QAAQ,EAAE;UAACO,OAAO,EAAEL;QAAV;MADR,CAAN;IAGH;EACJ;;EACD,OAAO;IAACrB,QAAD;IAAUoB;EAAV,CAAP;AACH"},"metadata":{},"sourceType":"module"}